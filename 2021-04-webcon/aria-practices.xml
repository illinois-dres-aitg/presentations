<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="funct.css" type="text/css"?>
<?xm-well_formed path="funct.dtd"?>
<slides>
  <lang>en</lang>
  <footer>
    <a href="https://illinois.edu"
      alt="University of Illinois">
      <img src="../images/block-i.png"/>
    </a>
    Copyright &#169; 2021 University of Illinois
  </footer>
  <title>W3C ARIA Authoring Practices 1.2 for Developers and Evaluators</title>
  <person>
    <name>Mark McCarthy, M.S., CPWA</name>
    <desc>Quality Assurance Accessibility Engineer</desc>
    <desc>Administrative Information Technology Services</desc>
    <desc href="mailto:mcmccar2@uillinois.edu">mcmccar2@uillinois.edu</desc>
  </person>
  <person>
    <name>Jon Gunderson, Ph.D., CPWA</name>
    <desc>Coordinator of Accessible IT Group</desc>
    <desc>Division of Disability Resources and Educational Services</desc>
    <desc href="mailto:jongund@illinois.edu">jongund@illinois.edu</desc>
  </person>

  <conference>
    <name href="https://webcon.illinois.edu/sessions/w3c-aria-authoring-practices-for-developers-and-evaluators/">2021 Illinois Web Conference</name>
    <desc>Online</desc>
    <desc>April 8th, 2021</desc>
  </conference>

  <desc href="../">Presentations</desc>

  <stylesheet media="screen">../css/bootstrap.min.css</stylesheet>
  <stylesheet media="screen">../css/bootstrap-theme.min.css</stylesheet>
  <stylesheet media="screen">../css/bootstrap-accessibility.css</stylesheet>

  <stylesheet media="screen">../css/html-slides.css</stylesheet>

  <script>../js/jquery-2.1.1.min.js</script>
  <script>../js/bootstrap.min.js</script>
  <script>../js/bootstrap-accessibility.min.js</script>
  <script>../js/html-slides.js</script>

  <slide>
    <title>Overview</title>
    <contents>
      <ul>
        <li>Purpose of ARIA</li>
        <li>Goals of ARIA 1.2 release</li>
        <li>ARIA Authoring Practices</li>
        <li>ARIA Assistive Technology Project</li>
      </ul>
      <script type="text/javascript">
        slideShowURL()
      </script>
    </contents>
  </slide>

  <slide>
    <title>Describing Semantics and Behavior</title>
    <contents>
     <p>Provide an inter-operable way to describe the features of <em>custom widgets</em>:</p>
     <ul>
       <li><strong>Role:</strong> Describes the type of widget, which implies the <em>keyboard interaction</em>.</li>
       <li><strong>Properties and States:</strong> Describing features like "expandable", "checked" or "selected".</li>
       <li><strong>Language independence:</strong> Roles, properties and states can be translated by the operating systems and assistive technologies to local languages.</li>
       <li><strong>Labeling:</strong> Giving a widget and its components names to understand their purpose.</li>
       <li><strong>Relationships:</strong> How different components relate to each other (e.g. descriptions, controls, owns).</li>
       <li><strong>Grouping:</strong> Groups of related components (e.g. lists, menus, trees, tab panels).</li>
     </ul>
    </contents>
  </slide>

  <slide>
    <title>Standardize Information Provided to Accessibility APIs</title>
    <contents>
      <p>Define how browsers represent HTML markup to the following accessibility APIs:</p>
        <ul>
          <li>ATK/AT-SPI (Linux/Unix)</li>
          <li>Microsoft Active Accessibility (MSAA) + IAccessible2</li>
          <li>Microsoft UI Automate</li>
          <li>MacOS Accessibility API</li>
        </ul>
    </contents>
  </slide>


  <slide>
    <title>ARIA Contract with Browsers and Assistive Technologies</title>
    <contents>
      <h2>Browsers</h2>
      <ul>
        <li>The use of ARIA markup does not affect browser behavior or rendering.</li>
        <li>ARIA only affects how information is represented in accessibility APIs (e.g. MSAA+IAccessible2, ATK+SPI, UIAutomate, MacOS).</li>
      </ul>

      <h2>Assistive Technologies</h2>
      <ul>
        <li>Do not specify what assistive technologies will do with the information.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Accessible Name Calculation</title>
    <contents>
        <ul>
          <li><a href="https://w3c.github.io/aria-practices/#names_and_descriptions">Section 5: Providing Accessible Names and Descriptions</a></li>
          <li>In general only <strong>one</strong> technique should be used to define an accessible name, if more than one technique is used the following priority is used for the calculation.</li>
        </ul>
        <h2 id="heading_ant">Accessible Name Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-labelledby</code></td>
              <td>
                <ul>
                  <li>The <code>aria-labelledby</code> attribute contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the accessible name.</li>
                  <li>References typically identify visible text on the screen in visual proximity to the control.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>aria-label</code></td>
              <td>
                <ul>
                  <li>The <code>aria-label</code> attribute text content defines the accessible name.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>3</td>
              <td>text content</td>
              <td>
                <ul>
                  <li>Some ARIA widget roles allow the text content of the container element to define an accessible name (e.g. <code>role="checkbox"</code>).</li>
                  <li>Text content includes text alternatives, for example <code>alt</code> attribute content of an <code>img</code> element.</li>
                  <li>Text content includes text from generated CSS, for example when the <code>content</code> property is used.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>4</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>If no other source of an accessible name is found and the element has a <code>title</code> attribute, the content of the <code>title</code> attribute will used to define the accessible name.</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
  </slide>

  <slide>
    <title>Accessible Description Calculation</title>
    <contents>
        <ul>
          <li><a href="https://w3c.github.io/aria-practices/#names_and_descriptions">Section 5: Providing Accessible Names and Descriptions</a></li>
          <li>Accessible description is a string that provides more information about a image, form control, link or ARIA widget.</li>
          <li>Screen readers each have their own ways of rendering and sometimes ignoring the <em>description information</em> information.</li>
        </ul>

        <h2 id="heading_ant">Accessible Description Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-describedby</code></td>
              <td>
                <ul>
                  <li>Creates a string description of an item on the web page, typically called the <q>Accessible Description</q> in the accessibility API.</li>
                  <li>The <code>aria-describedby</code> attribute contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the <em>accessible description</em>.</li>
                  <li>Designed to reference visible text on the screen, like instructions and error feedback.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>Creates a string description of an item on the web page, typically called the <q>Accessible Description</q> in the accessibility API.</li>
                  <li>If no other source of an <em>accessible description</em> is found and the element has a <code>title</code> attribute that is <strong>not</strong> being used to define an accessible name, the content of the <code>title</code> attribute is used to define the <em>accessible description</em>.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td><span class="postponed">ARIA 1.3 (future)</span></td>
              <td><code>aria-description</code></td>
              <td>
                <ul>
                  <li>Similar to <code>aria-label</code> attribute, text content is used to define an accessible description.</li>
                  <li>The <code>aria-description</code> attribute is in the current <a href="https://w3c.github.io/aria/#aria-description" target="_spec">editors working draft for ARIA 1.3</a>, but will be removed and will most likely be included in ARIA 1.3.</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
  </slide>

  <slide>
    <title>aria-details: Navigation to descriptive or related content on a page</title>
    <contents>
      <ul>
        <li>When a string is not a sufficient description of an image, the <a href="https://w3c.github.io/aria/#aria-details"><code>aria-details</code></a> property is designed to provide a reference to another section of the current document to provide more information about an image.</li>
        <li><code>aria-details</code> was added to ARIA 1.0 at the request of the DPUB accessibility working group that needed a way for assistive technologies to provide navigation to more robust descriptions of images than can be communicated through simple strings of text (e.g. accessible description on previous slide).</li>
        <li>The major issue with <code>aria-details</code> for the web is the <strong>poor</strong> assistive technology support within popular screen readers for Windows and macOS.  Most screen readers ignore it or at best announce a description is available, but provides no information on the location on the page or a way to navigate to the content.</li>
        <li>Assistive technology support may improve with the implementation of ARIA 1.3 and the new attributes related to annotating online documents.  For example, online tools like Google documents will support the annotation attributes and these new attributes will use <code>aria-details</code> attribute as way to reference the annotation information.</li>
      </ul>

    </contents>
  </slide>

  <slide>
    <title>New features in ARIA 1.2</title>
    <contents>
      <p><a href="https://www.w3.org/TR/wai-aria-1.2/" target="_spec">Accessible Rich Internet Applications  1.2 Candidate Recommendation</a> (March 2021)</p>
      <h2>Major Changes</h2>
      <ul>
        <li>HTML harmonization</li>
        <li>Combobox design pattern 1.2 that works with assistive technologies.</li>
        <li>Accessible Object Model (AOM) to reflect some ARIA properties.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>HTML harmonization</title>
    <contents>
      <ul>
        <li>Define roles appropriate for every HTML element.</li>
        <li>Allows assignment of default <a href="https://www.w3.org/TR/html-aria/" target="_spec">ARIA role mappings to every HTML element</a>.</li>
        <li>Some new roles, like <code>generic</code> role for elements with no semantics like <code>div</code> and <code>span</code>, should not be used by developers.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>ARIA 1.2 Combobox Design Pattern</title>
    <contents>
      <ul>
        <li><code>combobox</code> role is on the <code>input</code> element.</li>
        <li><code>aria-expanded</code> attribute is on the <code>input</code> element.</li>
        <li><code>aria-haspopup</code> attribute is on the <code>input</code> element.</li>
        <li><code>aria-controls</code> references the popup widget (e.g. listbox, grid or tree).</li>
      </ul>

      <h2>Legacy Combobox Patterns</h2>
      <p>ARIA 1.2 pattern is similar to the ARIA 1.0 combobox pattern, but instead of using <code>aria-owns</code> uses <code>aria-controls</code> to reference associated popup widget and has good AT support.  ARIA 1.1 pattern was never supported by assistive technologies and used a container model of having the <code>input</code> element and popup widget as  descendants of an element with the role <code>combobox</code>.  The 1.1 pattern change was made to support of UIAutomation model of a combobox.</p>
    </contents>
  </slide>

  <slide>
    <title>Accessible Object Model (AOM): Setting Roles, Properties and States</title>
    <contents>

       <p>In addition to using in-line HTML code and the <code>setAttribute</code> and <code>getAttribute</code> DOM methods for setting ARIA roles, properties and states, new DOM properties will also be available through the <a href="https://w3c.github.io/aria/#idl-interface" target="_spec">IDL Interface</a> requirements defined in <a href="https://www.w3.org/TR/wai-aria-1.2/" target="_spec">ARIA 1.2 Candidate Recommendation</a>.</p>

        <table class="table table-striped">
          <caption>Setting ARIA Role</caption>
          <tbody>
            <tr>
              <th>Role</th>
              <td><code>tablist</code></td>
            </tr>
            <tr>
              <th>Inline</th>
              <td><code>&lt;div role="tablist"&gt;</code></td>
            </tr>
            <tr>
              <th>setAttribute</th>
              <td><code>e.setAttribute("role", "tablist");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>e.role = tablist";</code></td>
            </tr>
          </tbody>
        </table>

        <table class="table table-striped">
          <caption>Setting Accessible Name</caption>
          <tbody>
            <tr>
              <th>Attribute</th>
              <td><code>aria-label</code></td>
            </tr>
            <tr>
              <th>Inline</th>
              <td><code>&lt;div role="button" aria-label="Play"&gt;</code></td>
            </tr>
            <tr>
              <th>setAttribute</th>
              <td><code>e.setAttribute("aria-label", "play");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>e.ariaLabel = "Play";</code></td>
            </tr>
          </tbody>
        </table>

        <table class="table table-striped">
          <caption>Setting State</caption>
          <tbody>
            <tr>
              <th>Attribute</th>
              <td><code>aria-checked</code></td>
            </tr>
            <tr>
              <th>Inline</th>
              <td><code>&lt;div role="checkbox" aria-checked="mixed"&gt;</code></td>
            </tr>
            <tr>
              <th>setAttribute</th>
              <td><code>e.setAttribute("aria-checked", "mixed");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>e.ariaChecked = "mixed";</code></td>
            </tr>
          </tbody>
        </table>

        <p>NOTE: AOM is only available on the most recent browser releases.</p>

    </contents>
  </slide>

  <slide>
    <title>Accessible Object Model (AOM): Getting Values</title>
    <contents>
        <table class="table table-striped">
          <caption>Getting ARIA Role</caption>
          <tbody>
            <tr>
              <th>Attribute</th>
              <td><code>role</code></td>
            </tr>
            <tr>
              <th>getAttribute</th>
              <td><code>var role = e.getAttribute("role");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>var role = e.role;</code></td>
            </tr>
          </tbody>
        </table>

        <table class="table table-striped">
          <caption>Getting <code>aria-label</code> attribute.</caption>
          <tbody>
            <tr>
              <th>Attribute</th>
              <td><code>aria-label</code></td>
            </tr>
            <tr>
              <th>getAttribute</th>
              <td><code>var label = e.getAttribute("aria-label");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>var label = e.ariaLabel;</code></td>
            </tr>
          </tbody>
        </table>

        <p>NOTE: Getting the <code>aria-label</code> attribute is <strong>not</strong> the same as getting the <em>computed accessible name</em>.</p>

        <table class="table table-striped">
          <caption>Getting State</caption>
          <tbody>
            <tr>
              <th>Attribute</th>
              <td><code>aria-checked</code></td>
            </tr>
            <tr>
              <th>setAttribute</th>
              <td><code>var value = e.getAttribute("aria-checked");</code></td>
            </tr>
            <tr>
              <th>DOM Property (<span class="new">ARIA 1.2</span>)</th>
              <td><code>var value = e.ariaChecked;</code></td>
            </tr>
          </tbody>
        </table>

    </contents>
  </slide>

  <slide>
    <title>Accessible Object Model (AOM): Test Page</title>
    <contents>

      <table class="table table-striped">
        <caption>Getting value with DOM <code>role</code> property</caption>
        <thead>
          <tr>
            <th>Setting Code</th>
            <th>Return value of <code>.role</code></th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="sourcecode">&lt;input type="checkbox"/></td>
            <td id="aom-11-role"></td>
          </tr>
          <tr>
            <td class="sourcecode">&lt;div role="checkbox"></td>
            <td id="aom-12-role"></td>
          </tr>
          <tr>
            <td class="sourcecode">e.setAttribute('role', 'checkbox');</td>
            <td id="aom-13-role"></td>
          </tr>
          <tr>
            <td class="sourcecode">e.role = 'checkbox';</td>
            <td id="aom-14-role"></td>
          </tr>
        </tbody>
      </table>

      <table class="table table-striped">
        <caption>Getting value with DOM <code>ariaChecked</code> property</caption>
        <thead>
          <tr>
            <th>Setting Code</th>
            <th>Return value of <code>.ariaChecked</code></th>
            <th>typeof<code>.ariaChecked</code></th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td class="sourcecode">&lt;div role='checkbox'  aria-checked='true'></td>
            <td id="aom-22-checked"></td>
            <td id="aom-22-type"></td>
          </tr>
          <tr>
            <td class="sourcecode">e.setAttribute('aria-checked', 'true');</td>
            <td id="aom-23-checked"></td>
            <td id="aom-23-type"></td>
          </tr>
          <tr>
            <td class="sourcecode">e.ariaChecked = 'true';</td>
            <td id="aom-24-checked"></td>
            <td id="aom-24-type"></td>
          </tr>
          <tr>
            <td class="sourcecode">e.ariaChecked = true;</td>
            <td id="aom-25-checked"></td>
            <td id="aom-25-type"></td>
          </tr>
        </tbody>
      </table>

      <div hidden="">
        <div id="aom-11"><input type="checkbox"/></div>
        <div id="aom-12"><div role="checkbox"></div></div>
        <div id="aom-13"><div></div></div>
        <div id="aom-14"><div></div></div>

        <div id="aom-22"><div role="checkbox" aria-checked="true"></div></div>
        <div id="aom-23"><div></div></div>
        <div id="aom-24"><div></div></div>
        <div id="aom-25"><div></div></div>

        <script>
          function setAttribute(id, attr, value) {
            document.getElementById(id).setAttribute(attr, value);
          }

          function setProperty(id, prop, value) {
            document.getElementById(id)[prop] = value;
          }

          function getValue(id1, id2, attr) {
            var value = document.getElementById(id2)[attr];
            if (value) {
              if (typeof value === 'string') {
                value = "'" + value + "'";
              }
            }
            else {
              value = "undefined";
            }

            document.getElementById(id1).textContent = value;
          }

          function getType(id1, id2, attr) {
            var value = document.getElementById(id2)[attr];
            var type = typeof document.getElementById(id2)[attr];

            if (!value) {
              type = '';
            }
            document.getElementById(id1).textContent = type;
          }

          getValue('aom-11-role', 'aom-11', 'role');
          getValue('aom-12-role', 'aom-12', 'role');

          setAttribute(`aom-13`, 'role', 'checkbox');
          getValue('aom-13-role', 'aom-13', 'role');

          setProperty(`aom-14`, 'role', 'checkbox');
          getValue('aom-14-role', 'aom-14', 'role');

          getValue('aom-22-checked', 'aom-22', 'ariaChecked');
          getType('aom-22-type', 'aom-22', 'ariaChecked');

          setAttribute(`aom-23`, 'aria-checked', 'true');
          getValue('aom-23-checked', 'aom-23', 'ariaChecked');
          getType('aom-23-type', 'aom-23', 'ariaChecked');

          setProperty(`aom-24`, 'ariaChecked', 'true');
          getValue('aom-24-checked', 'aom-24', 'ariaChecked');
          getType('aom-24-type', 'aom-24', 'ariaChecked');

          setProperty(`aom-25`, 'ariaChecked', true);
          getValue('aom-25-checked', 'aom-25', 'ariaChecked');
          getType('aom-25-type', 'aom-25', 'ariaChecked');
        </script>

      </div>

    </contents>
  </slide>

  <slide>
    <title>Accessible Object Model (AOM): Gotchas</title>
    <contents>
        <ul>
          <li>For now only values that have been set using the DOM property can be read using the DOM property.</li>
          <li>Not all ARIA properties will be implemented, notably ARIA properties related to <code>ID</code> references, like <code>aria-labelledby</code>, <code>aria-controls</code>, etc..., since the HTML specification is still defining how properties using <code>ID</code> references will be implemented in the DOM.</li>
          <li>The value returned from a <a href="https://www.w3.org/TR/wai-aria-1.2/#AccessibilityRole" target="_spec">ARIA DOM property should be a string</a>, but if it was set with a boolean value it may be returned as boolean value (e.g. <code>aria-checked</code>).</li>
        </ul>
    </contents>
  </slide>

   <slide>
    <title>Carousel Design Pattern and Examples</title>
    <contents>
      <p><a href="https://w3c.github.io/aria-practices/#carousel" target="_spec">Editors Draft of Carousel Design Pattern</a></p>
      <ul>
        <li>Keyboard interaction.</li>
        <li>Proper use of ARIA roles.</li>
        <li>Proper use of ARIA properties and states.</li>
        <li>Examples:
          <ul>
            <li><a href="https://w3c.github.io/aria-practices/examples/carousel/carousel-1-prev-next.html#ex_label"  target="_example">Carousel using Previous and Next Buttons</a></li>
            <li><a href="https://w3c.github.io/aria-practices/examples/carousel/carousel-2-tablist.html#ex_label"  target="_example">Carousel using Tablist widget</a></li>
          </ul>
        </li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Combobox Design Pattern and Examples</title>
    <contents>
      <p><a href="https://w3c.github.io/aria-practices/#combobox" target="_spec">Editors Draft of Combobox Design Pattern</a></p>
      <ul>
        <li>Keyboard interaction.</li>
        <li>Proper use of ARIA roles.</li>
        <li>Proper use of ARIA properties and states.</li>
        <li>Examples:
          <ul>
            <li><a href="https://w3c.github.io/aria-practices/examples/combobox/combobox-autocomplete-both.html#ex_label"  target="_example">Combobox with auto-complete</a></li>
            <li><a href="https://w3c.github.io/aria-practices/examples/combobox/combobox-datepicker.html#ex_label" target="_example">Date picker combobox</a></li>
            <li>Newer examples support high contrast modes on Windows 10 and macOS and demonstrate how to use SVG to support high contrast modes.</li>
            <li><a href="https://github.com/w3c/aria-practices/blob/master/test/tests/combobox_autocomplete-both.js" target="_example">Regression tests for quality assurance</a> and can be used as models for in-house regression testing.</li>
          </ul>
        </li>
      </ul>
    </contents>
  </slide>

   <slide>
    <title>SkipTo.js for Keyboard Navigation</title>
    <contents>

      <h2>Goals</h2>
      <ul>
        <li>Improve keyboard accessibility to web page content.  Basically give keyboard users some of the header and landmark navigation features available in screen readers.</li>
        <li>Allow authors to identify more than one important navigational point within web resources.</li>
        <li>Make it simpler to implement Bypass Blocks requirement.</li>
        <li>Make <q>hidden</q> header and landmark region information available to all users to help promote a better understanding of accessibility.</li>
      </ul>

      <h2>Examples</h2>
      <ul>
        <li><a href="https://accessibleit.disability.illinois.edu" target="_website">DRES Accessible IT Group</a></li>
        <li><a href="https://ahs.illinois.edu" target="_website">College of Applied Health Sciences</a></li>
        <li><a href="https://wordpress.webtheme.illinois.edu/" target="_website">Illinois Theme for WordPress</a></li>
        <li><a href="https://webcon.illinois.edu/" target="_website">Illinois Web Conference</a></li>
      </ul>

      <h2>Configuration Information</h2>

      <ul>
        <li>Include reference to <a href="https://github.com/a11y-tools/skipto/tree/master/compiled/js" target="_code"><code>skipto.js</code></a> script in the page template.</li>
        <li>To change default settings use the <code>SkipToConfig</code> object.
          <ul>
            <li>CSS Selectors are used for defining which elements are included in the Landmarks and Headings groups.</li>
            <li>The CSS selectors can be modified through configuration from the default settings.</li>
            <li>Colors can also be customized and there is also a theme option, including an "Illinois" theme.</li>
            <li>NEW: CDN reference to the script file: <a href="https://cdn.disability.illinois.edu/skipto.min.js" target="_script">https://cdn.disability.illinois.edu/skipto.min.js</a></li>
            <li><a href="https://github.com/a11y-tools/skipto" target="_website">Full list of configuration options</a>.</li>
          </ul>
        </li>
      </ul>

      <h2>Example Configuration</h2>

      <div>
        <code><pre>
    &lt;script src="https://cdn.disability.illinois.edu/skipto.min.js">&lt;/script>
    &lt;script>
        var SkipToConfig =  {
            'settings': {
                'skipTo': {
                    landmarks: 'main, [role="main"], [role="search"], nav',
                    headings: 'main h1, main h2',
                    colorTheme: 'illinois',
                    customClass: 'aitg'
                }
            }
        };
    &lt;/script>
        </pre></code>
      </div>

    </contents>
  </slide>

   <slide>
    <title>W3C ARIA Assistive Technology Project Community Group</title>
    <contents>
      <p><a href="https://www.w3.org/community/aria-at/" target="_group">ARIA-AT Community group</a> goals:</p>
      <ul>
        <li>Provide information on who ARIA changes the user experience for people with disabilities.</li>
        <li>Provide feedback to screen reader developers on how they provide ARIA information and expectations on what they should be providing.</li>
        <li>Improve consistency of information provided by different assistive technologies.</li>
        <li>Long term goal is to have tests for each ARIA Practices code example.</li>
      </ul>
      <p><iframe src="https://www.w3.org/community/aria-at/" title="ARIA-AT Community group website" width="98%" height="600px"></iframe></p>
    </contents>
  </slide>

   <slide>
    <title>Prototype of ARIA-AT Test Harness and Test Cases</title>
    <contents>
      <p><a href="https://aria-at.w3.org" target="_group">ARIA-AT group test harness</a> and test cases for:</p>
      <ul>
        <li>Checkboxes</li>
        <li>Menubar</li>
      </ul>
      <p><iframe src="https://aria-at.w3.org" title="ARIA-AT group test harness" width="98%" height="600px"></iframe></p>
    </contents>
  </slide>

  <slide>
    <title>Questions and Discussion</title>
    <contents>
      <details>
        <summary>Does anyone know what the acronym CPWA means?</summary>
        <ul>
          <li>Certified Professional in Web Accessibility (CWPA)</li>
          <li><a href="https://www.accessibilityassociation.org/certifications" target="_iaap">Certification options:</a>
            <ul>
              <li>Certified Professional in Accessibility Core Competencies (CPACC)</li>
              <li>Web Accessibility Specialist (WAS)</li>
              <li><abbr title="Certified Professional in Web Accessibility">CPWA</abbr> = <abbr title="Certified Professional in Accessibility Core Competencies">CPACC</abbr> + <abbr title=">Web Accessibility Specialist">WAS</abbr></li>
            </ul>
          </li>
        </ul>
      </details>
      <details style="margin-top: 3em">
        <summary>Interested in developing the open standards of the W3C?</summary>
        <ul>
          <li>University of Illinois is <a href="https://www.w3.org/Consortium/Member/List" target="_w3c">member of the W3C</a>.</li>
          <li><a href="https://www.w3.org/groups/" target="_w3c">Opportunities in developing open standards</a>:
            <ul>
              <li>Working Groups: Membership required or being an invited expert.</li>
              <li>Interest Groups: Anyone can join.</li>
              <li>Community Groups: Anyone can join.</li>
            </ul>
          </li>
          <li>Contact <a href="mailto:jongund@illinois.edu">Jon Gunderson</a> to get more information about joining a Working Group.</li>
          <li>Anyone can participate in Interest and Community Groups, but since Illinois is a W3C member you may need to setup a W3C account by contacting Jon Gunderson.</li>
        </ul>
      </details>
    </contents>
  </slide>

</slides>


