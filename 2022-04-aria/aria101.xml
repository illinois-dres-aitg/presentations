<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="funct.css" type="text/css"?>
<?xm-well_formed path="funct.dtd"?>
<slides>
  <lang>en</lang>
  <footer>
    <a href="https://illinois.edu">
      <img src="../images/block-i.png"
      alt="University of Illinois"/>
    </a>
    Copyright &#169; 2022 University of Illinois
  </footer>
  <title>Introduction to W3C Accessible Rich Internet Accessibility (ARIA) and Screen Readers</title>
  <person>
    <name>Jon Gunderson, Ph.D.</name>
    <desc href="http://disability.illinois.edu">Division of Disability Resources and Educational Services</desc>
    <desc href="http://ahs.illinois.edu">College of Applied Health Sciences</desc>
    <desc href="http://illinois.edu">University of Illinois at Urbana-Champaign</desc>
    <desc href="mailto:jongund@illinois.edu">jongund@illinois.edu</desc>
  </person>

  <conference>
    <name href="https://webcon.illinois.edu/session/introduction-to-w3c-accessible-rich-internet-accessibility-aria-and-screen-readers/">Illinois Webcon Pre-Conference Workshop</name>
    <desc>Online</desc>
    <desc>April 6th, 2020</desc>
  </conference>

  <desc href="../">Presentations</desc>

  <stylesheet media="screen">../css/bootstrap.min.css</stylesheet>
  <stylesheet media="screen">../css/bootstrap-theme.min.css</stylesheet>
  <stylesheet media="screen">../css/bootstrap-accessibility.css</stylesheet>

  <stylesheet media="screen">../css/html-slides.css</stylesheet>

  <script>../js/jquery-2.1.1.min.js</script>
  <script>../js/bootstrap.min.js</script>
  <script>../js/bootstrap-accessibility.min.js</script>
  <script>../js/html-slides.js</script>

  <slide>
    <title>Overview</title>
    <contents>
      <ul>
        <li>Screen Readers</li>
        <li>ARIA Basics</li>
        <li>ARIA Landmarks</li>
        <li>Using ARIA to build an custom checkbox widget</li>
        <li>New features in ARIA 1.2</li>
        <li>ARIA Authoring Practices</li>
      </ul>
      <script type="text/javascript">
        slideShowURL()
      </script>
    </contents>
  </slide>

  <slide>
    <title>Part 1: Screen Readers</title>
    <contents>
    </contents>
  </slide>

  <slide>
    <title>What are screen readers?</title>
    <contents>
      <ul>
        <li>Translate the graphical user interface to to speech, sounds and refreshable Braille.</li>
        <li>Keyboard commands for operation on desktop computers.</li>
        <li>Swipe/tap and keyboard (e.g. bluetooth) commands for operation on touch devices.</li>
        <li>Use operating system accessibility APIs:
          <ul>
            <li><em>Microsoft Windows:</em> MSAA + IAccessible2</li>
            <li><em>Microsoft Windows:</em> UI Automation</li>
            <li><em>macOS:</em> AX API</li>
            <li><em>Linux:</em> ATK / AT-API</li>
          </ul>
        </li>
        <li>Accessibility APIs create tree like structures for navigation.</li>
        <li>Browsers communicate web content information through accessibility APIs.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>How do I know?</title>
    <contents>
      <p>When using a screen reader, how do I know:</p>
      <ul>
        <li>What user interface item am I on?</li>
        <li>Can I interact with this item (e.g. button or textbox)?</li>
        <li>How does this item relate to other items around it (e.g. menus, combo box)?</li>
        <li>If I am lost, how do I get back to a known place?</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Screen Readers</title>
    <contents>
      <ul>
        <li><em>Microsoft Windows:</em> <a href="https://www.nvaccess.org" target="_more">Non-Visual Desktop Access</a> (NVDA, Open Source)</li>
        <li><em>Microsoft Windows:</em> <a href="https://www.freedomscientific.com/products/software/jaws/" target="_more">JAWS</a> (Commercial)</li>
        <li><em>macOS:</em> <a href="https://support.apple.com/accessibility" target="_more">VoiceOver</a> (included with macOS)</li>
        <li><em>Linux:</em> <a href="https://help.gnome.org/users/orca/stable/" target="_more">Orca</a> (included with most Linux distributions)</li>
        <li><em>iOS:</em> <a href="https://support.apple.com/accessibility" target="_more">VoiceOver</a> (included with iOS)</li>
        <li><em>Android:</em> <a href="https://support.google.com/accessibility/android/answer/6283677?hl=en" target="_more">TalkBack</a> (included with most Linux distributions)</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Accessibility APIs Basic Concepts</title>
    <contents>
      <table class="table table-striped">
        <thead>
          <tr>
            <th>Concept</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Role</td>
            <td>The type of user interface element, for example:
              <ul>
               <li>image</li>
               <li>heading</li>
               <li>textbox</li>
               <li>radio button</li>
               <li>groupings</li>
             </ul>
           </td>
          </tr>
          <tr>
            <td>Accessible Name</td>
            <td>A text label for a particular user interface element.</td>
          </tr>
          <tr>
            <td>Accessible Description</td>
            <td>More information about particular user interface element, for examples:
              <ul>
                <li>Instructions</li>
                <li>Error feedback</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>Properties</td>
            <td>Features of a user interface element that tend to be static, for example:
              <ul>
                <li>Button has a pop menu.</li>
                <li>Textbox content is required.</li>
                <li>More than one option can be selected from a list.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>States</td>
            <td>Features of a user interface element that tend to change through user interaction, for example:
              <ul>
                <li>Radio button is checked.</li>
                <li>Button is in the pressed state.</li>
                <li>Option in a list is selected.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Browsers and Accessibility APIs</title>
    <contents>
      <p><img src="images/browser-apis.png" width="60%" alt="Flow chart of how HTML, Javascript and CSS are combined through the rendering engine to send information to Accessibility APIs."/></p>
      <p><strong>NOTE:</strong> HTML and ARIA semantics are important when the information is being rendered for more than just graphical renderings.</p>
    </contents>
  </slide>

  <slide>
    <title>Viewing Accessibility Tree: Firefox Browser</title>
    <contents>
      <p><img class="screenshot" src="images/firefox-accessibility-tree.png" width="100%" alt="Screen shot of accessibility tree in firefox for University of Illinois home page"/></p>
    </contents>
  </slide>

  <slide>
    <title>Viewing Accessibility Tree: Chrome Browser</title>
    <contents>
      <p><img class="screenshot" src="images/chrome-accessibility-tree.png" width="100%" alt="Screen shot of accessibility tree in firefox for University of Illinois home page"/></p>
    </contents>
  </slide>

  <slide>
    <title>Part 2: Introduction to Accessible Rich Internet Application (ARIA) </title>
    <contents>
    </contents>
  </slide>

  <slide>
    <title>ARIA Specifications: History</title>
    <contents>
      <ul>
        <li><a href="https://www.w3.org/TR/wai-aria-1.0/" target="_spec">Accessible Rich Internet Applications 1.0</a> (2014)</li>
        <li><a href="https://www.w3.org/TR/2017/REC-wai-aria-1.1-20171214/" target="_spec">Accessible Rich Internet Applications 1.1</a> (2017)</li>
        <li><a href="https://www.w3.org/TR/wai-aria-1.2/" target="_spec">Accessible Rich Internet Applications 1.2</a> (2021, Candidate Recommendation)</li>
        <li><a href="https://w3c.github.io/aria/" target="_spec">Accessible Rich Internet Applications 1.3</a> (2022, Working Draft)</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Related Resources</title>
    <contents>
      <dl>
        <dt><a href="https://w3c.github.io/core-aam/" target="_spec">Core Accessibility API Mappings 1.2</a> (2022, Working Draft)</dt>
        <dd>Define how ARIA markup is represented in specific accessibility APIs.</dd>
        <dt><a href="https://w3c.github.io/accname/" target="_spec">Accessible Name and Description Computation 1.2</a> (2022, Working Draft)</dt>
        <dd>Defines how accessible names and descriptions are calculated.</dd>
        <dt><a href="https://www.w3.org/TR/html-aria/" target="_spec">ARIA in HTML</a> (2021, living)</dt>
        <dd>Defines how HTML elements are represented using ARIA.</dd>
        <dt><a href="https://www.w3.org/TR/wai-aria-practices/" target="_spec">WAI-ARIA Authoring Practices 1.2</a> (2022, Note)</dt>
        <dd>Design patterns and examples of using ARIA in documents and widgets.</dd>
      </dl>
    </contents>
  </slide>

  <slide>
    <title>ARIA Basics: Describe Semantics and Behavior</title>
    <contents>
       <dl>
         <dt>Role</dt>
         <dd>
          Describes the type of widget, which implies the <em>keyboard interaction</em>.
         </dd>

         <dt>Properties and States</dt>
         <dd>
          Describing features like "expandable", "checked" or "selected".
         </dd>

         <dt>Language independence</dt>
         <dd>
          Roles, properties and states can be translated by the operating systems and assistive technologies to local languages.
        </dd>

         <dt>Accessible name and description</dt>
         <dd>
          Requirements for labeling or providing additional information for a landmark or widget.
        </dd>

         <dt>Relationships</dt>
         <dd>
          How different components relate to each other (e.g. controls, owns).
        </dd>

         <dt>Grouping</dt>
         <dd>
          Groups of related components (e.g. lists, menus, trees, tab panels).
        </dd>
       </dl>
    </contents>
  </slide>

  <slide>
    <title>ARIA Basics: Contract with Browsers and Assistive Technologies</title>
    <contents>
      <h2>Browsers</h2>
      <ul>
        <li>The use of ARIA markup does not affect browser behavior or rendering.</li>
        <li>ARIA only affects how information is represented in accessibility APIs (e.g. MSAA+IAccessible2, ATK+SPI, UIAutomate, MacOS).</li>
      </ul>

      <h2>Assistive Technologies</h2>
      <ul>
        <li>Do not specify what assistive technologies will do with the information.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>ARIA Basics: Landmark Region and Widget Roles</title>
    <contents>
      <dl>
        <dt>Landmark Region Roles</dt>
        <dd>Identify and name sections of a web page.</dd>
        <dd>Provide efficient orientation and <em>navigation</em> to sections of content.</dd>
        <dt>Widget Roles</dt>
        <dd>Identify <em>keyboard</em> interaction model.</dd>
        <dd>Describe states, properties, groupings and relationships.</dd>
      </dl>
    </contents>
  </slide>


  <slide>
    <title>ARIA Basics: Accessible Name Calculation</title>
    <contents>
        <ul>
          <li><a href="https://www.w3.org/TR/accname-aam/">W3C Accessible Name and Description Computation Specification</a></li>
          <li>In general only <strong>one</strong> technique should be used to define an accessible name, if more than on technique is used the following priortiy is used for the calculation.</li>
        </ul>
        <h2 id="heading_ant">Accessible Name Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-labelledby</code></td>
              <td>
                <ul>
                  <li>The <a href="https://www.w3.org/TR/wai-aria-1.2/#aria-labelledby" target="_spec"><code>aria-labelledby</code></a> attribute contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the accessible name.</li>
                  <li>References typically identify visible text on the screen in visual proximity to the control.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>aria-label</code></td>
              <td>
                <ul>
                  <li>The <a href="https://www.w3.org/TR/wai-aria-1.2/#aria-label" target="_spec"><code>aria-label</code></a> attribute text content defines the accessible name.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>3</td>
              <td>text content</td>
              <td>
                <ul>
                  <li>Some ARIA widget roles allow the text content of the container element to define an accessible name (e.g. <code>role="checkbox"</code>).</li>
                  <li>Text content includes text alternatives, for example <code>alt</code> attribute content of an <code>img</code> element.</li>
                  <li>Text content includes text from generated CSS, for example when the <code>content</code> property is used.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>4</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>If no other source of an accessible name is found and the element has a <code>title</code> attribute, the content of the <code>title</code> attribute will used to define the accessible name.</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
  </slide>

  <slide>
    <title>ARIA Basics: Accessible Description Calculation</title>
    <contents>
        <ul>
          <li><a href="https://www.w3.org/TR/accname-aam/">W3C Accessible Name and Description Computation Specification</a></li>
          <li>Accessible description provides more information about a form control, link or aria widget.</li>
          <li>Screen readers each have their own ways of rendering and sometimes ignoring the <em>description information</em> information.</li>
        </ul>
        <h2 id="heading_ant">Accessible Description Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-describedby</code></td>
              <td>
                <ul>
                  <li>The <a href="https://www.w3.org/TR/wai-aria-1.2/#aria-describedby" target="_spec"><code>aria-describedby</code></a> attribute contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the <em>accessible description</em>.</li>
                  <li>Designed to reference visible text on the screen, like instructions and error feedback.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>If no other source of an <em>accessible description</em> is found and the element has a <code>title</code> attribute that is <strong>not</strong> being used to define an accessible name, the content of the <code>title</code> attribute is used to define the <em>accessible description</em>.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>Future</td>
              <td><code>aria-description</code><br/><span class="new">New in ARIA 1.3</span></td>
              <td>
                <a href="https://w3c.github.io/aria/#aria-description" target="_spec"><code>aria-description</code></a> attribute is similar to <code>aria-label</code> attribute, text content is used to define an accessible description.
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
  </slide>


  <slide>
    <title>ARIA Basics: Assistive Technologies Support Issues</title>
    <contents>
      <h2 id="heading_other">Other Description Techniques</h2>
      <table class="table table-striped table-hover" aria-labelledby="heading_other">
        <thead>
          <tr>
            <th>Technique</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>aria-errormessage</code></td>
            <td>
              <ul>
                <li>The <a href="https://www.w3.org/TR/wai-aria-1.2/#aria-errormessage" target="_spec"><code>aria-errormessage</code></a> attribute contains a list of <code>IDREF</code>s to elements on the page, similar to <code>aria-describedby</code>.</li>
                <li>Intention is to make sure error messages can be distinguished from accessible descriptions, which can be disabled by screen reader users.</li>
                <li>Must only be used in conjunction with <code>aria-invalid="true"</code> or on a HTML form control that supports the <code>invalid</code> property.</li>
                <li>Text content of referenced elements are concatenated to compute the <em>error message</em>.</li>
                <li>Designed to reference visible text on the screen, like instructions and error feedback.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td><code>aria-details</code></td>
            <td>
              <ul>
                <li><a href="https://www.w3.org/TR/wai-aria-1.2/#aria-details" target="_spec"><code>aria-details</code></a> provides a pointer using an ID reference to a location in the document for a more information on image, media or form control in a web resource.</li>
                <li>Useful when plain text descriptions are an insufficient description.</li>
                <li><em>Example:</em> An image of a chart can use <code>aria-details</code> reference a table with the data used to create or summarize the chart data.</li>
                <li>Screen readers can use this information to notify the user of the description and provide them with a way to jump directly to the description.</li>
                <li>Supported in EPUB readers for the blind, but not well supported in desktop screen readers.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>

      <h2>Assistive Technologies Support Issues</h2>
      <ul>
        <li>Theses ARIA attributes are examples where authors can provide information and browsers do their job in providing the information through the accessibility APIs, but it is not consistently supported in actual screen readers.</li>
        <li>The <a href="https://www.w3.org/community/aria-at/" target="_spec">ARIA Assistive Technologies Community Group</a> is working on raising awareness of inconsistencies and gaps in support of ARIA markup.</li>
      </ul>

    </contents>
  </slide>


  <slide>
    <title>Part 3: Landmark Regions </title>
    <contents>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Purpose</title>
    <contents>
      <ul>
        <li><em>Orientation:</em> What is the content and it's structure.</li>
        <li><em>Navigation:</em> Getting to the content of interest.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Named Regions</title>
    <contents>
      <p><a href="https://www.w3.org/TR/wai-aria/#landmark_roles" target="_spec">ARIA Landmark Role Specification</a></p>

      <table class="table table-striped" aria-label="ARIA Landmarks">
        <thead>
          <tr>
            <th>Landmark</th>
            <th>Frequency</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>banner</code></td>
            <td>One or none</td>
            <td>The common content typically found at the top of each page in a website.</td>
          </tr>
          <tr>
            <td><code>complementary</code></td>
            <td>As many as needed, often none.</td>
            <td>Identifies unique page content not part of the <code>main</code> landmark.</td>
          </tr>
          <tr>
            <td><code>contentinfo</code></td>
            <td>One or none</td>
            <td>The common content typically found at the bottom of each page in a website.</td>
          </tr>
          <tr>
            <td><code>main</code></td>
            <td>One</td>
            <td>Identify the main content area or areas of a web page or application.</td>
          </tr>
          <tr>
            <td><code>navigation</code></td>
            <td>At least one, and often more.</td>
            <td>Identify major groupings of navigational links to other pages in the website.</td>
          </tr>
          <tr>
            <td><code>search</code></td>
            <td>Typically one if there is a site search feature.</td>
            <td>Identify website search features</td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: DRES WEbsite</title>
    <contents>
      <p class="center"><a href="http://disability.illinois.edu" target="_example">Landmark Example: DRES Website</a></p>
      <img src="images/disability-home.png" width="99%" alt="Graphical browser rendering of University of Illinois Disability Services Home Page"/>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Pitfalls Observed</title>
    <contents>
      <ul>
        <li>ARIA menu roles were used in flyout menus:
          <ul>
            <li>No keyboard support to manage focus.</li>
            <li>Menu roles override link role.</li>
          </ul>
        </li>
        <li>Nested Navigation Landmarks, resulting in too many navigation landmarks.</li>
        <li>Landmarks indicated programmatic/styling sections, not semantic sections.</li>
        <li>Some content in landmarks some content not in landmarks.</li>
        <li><code>article</code> role was used as a landmark role.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: DRES Example Home Page</title>
    <style>
      table.table.table-striped th {
        min-width: 8em;
      }

      table.table.table-striped td em {
        color: #333;
        font-size: 90%;
      }

      table.table.table-striped {
        margin-bottom: 4em;
      }

      table.table.table-striped .level-2 {
        padding-left: 2em;
      }
    </style>
    <contents>

      <table class="table table-striped">
        <caption>Landmarks on DRES Home Page</caption>
        <thead>
          <tr>
            <th>Role</th>
            <th>Level</th>
            <th>Accessible Name</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>banner</td>
            <td>top</td>
            <td><em>no name required</em></td>
          </tr>
          <tr>
            <td>navigation</td>
            <td>top</td>
            <td>Quick Links</td>
          </tr>
          <tr>
            <td>navigation</td>
            <td>top</td>
            <td>Top Menu</td>
          </tr>
          <tr>
            <td>search</td>
            <td>top</td>
            <td><em>no name required</em></td>
          </tr>
          <tr>
            <td>main</td>
            <td>top</td>
            <td><em>no name required</em></td>
          </tr>
          <tr>
            <td class="level-2">navigation</td>
            <td>main</td>
            <td>Services and Resources</td>
          </tr>
          <tr>
            <td class="level-2">region</td>
            <td>main</td>
            <td>Spotlight (note: accessible name from heading)</td>
          </tr>
          <tr>
            <td class="level-2">region</td>
            <td>main</td>
            <td>A History of Firsts (note: accessible name from heading)</td>
          </tr>
          <tr>
            <td class="level-2">region</td>
            <td>main</td>
            <td>Calendar (note: accessible name from heading)</td>
          </tr>
          <tr>
            <td>contentinfo</td>
            <td>top</td>
            <td><em>no name required</em></td>
          </tr>
          <tr>
            <td class="level-2">navigation</td>
            <td>contentinfo</td>
            <td>Frequently Asked Questions (note: accessible name from heading)</td>
          </tr>
          <tr>
            <td class="level-2">navigation</td>
            <td>contentinfo</td>
            <td>Directory and Units</td>
          </tr>
        </tbody>
      </table>

      <p class="center"><img width="98%" src="images/dres-landmarks-home-page.png" alt="screen shot highlighting landmarks on dres home page"/></p>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: NVDA showing List for DRES Home Page</title>
    <contents>
      <p class="center"><img width="98%" src="images/landmark-list-dres-1.png" alt="screen shot NVDA list of landmarks on dres home page"/></p>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: DRES Example 2</title>
    <style>
      table.table.table-striped th {
        min-width: 8em;
      }

      table.table.table-striped td em {
        color: #333;
        font-size: 90%;
      }

      table.table.table-striped {
        margin-bottom: 4em;
      }
      table.table.table-striped .level-2 {
        padding-left: 2em;
      }
    </style>
    <contents>
      <table class="table table-striped">
        <caption>Landmarks on DRES Informational Pages</caption>
        <thead>
          <tr>
            <th>Role</th>
            <th>Level</th>
            <th>Accessible Name</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>banner</td>
            <td>top</td>
            <td><em>no name required</em></td>
          </tr>
          <tr>
            <td>navigation</td>
            <td>top</td>
            <td>Quick Links</td>
          </tr>
          <tr>
            <td>navigation</td>
            <td>top</td>
            <td>Top Menu</td>
          </tr>
          <tr>
            <td>search</td>
            <td>top</td>
            <td><em>no name required</em></td>
          </tr>
          <tr>
            <td>navigation</td>
            <td>top</td>
            <td>Services and Resources</td>
          </tr>
          <tr>
            <td>main</td>
            <td>top</td>
            <td><em>no name required</em></td>
          </tr>
          <tr>
            <td class="level-2">navigaton</td>
            <td>main</td>
            <td>Breadcrumbs</td>
          </tr>
          <tr>
            <td>contentinfo</td>
            <td>top</td>
            <td><em>no name required</em></td>
          </tr>
          <tr>
            <td class="level-2">navigation</td>
            <td>contentinfo</td>
            <td>Frequently Asked Questions (note: accessible name from heading)</td>
          </tr>
          <tr>
            <td class="level-2">navigation</td>
            <td>contentinfo</td>
            <td>Directory and Units</td>
          </tr>
        </tbody>
      </table>
      <p class="center"><img width="98%" src="images/dres-landmarks-general-page.png" alt="screen shot highlighting landmarks on a dres informational page"/></p>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: NVDA List of Landmarks</title>
    <contents>
      <p class="center"><img width="98%" src="images/landmark-list-dres-2.png" alt="screen shot NVDA list of landmarks on dres informational page"/></p>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: General Principles of Design</title>
    <contents>

      <p>
        Including <strong>all content</strong> on a page in one of its landmark regions and giving each landmark region a semantically meaningful role is one of the most effective ways of ensuring assistive technology users will not overlook information that is relevant to their needs.
      </p>

      <p><strong>Step 1: Identify the logical structure</strong></p>

      <ul>
        <li>Break the page into perceivable areas of content which designers typically indicate visually using alignment and spacing.</li>

        <li>Areas can be further defined into logical sub-areas as needed.</li>

        <li>An example of a sub-area is a portlet in a portal application.</li>
      </ul>

      <p><strong>Step 2: Assign landmark roles to each area</strong></p>

      <ul>
        <li>Assign landmark roles based on the type of content in the area.</li>

        <li><code>banner</code>, <code>main</code>, <code>complementary</code> and <code>contentinfo</code> landmarks should be top level landmarks.</li>

        <li>Landmark roles can be nested to identify parent/child relationships of the information being presented.</li>
      </ul>

      <p><strong>Step 3: Label areas</strong></p>

      <ul>
        <li>If a specific landmark role is used more than once on a web page, it should have a unique label.</li>

        <li>If a landmark is only used once on the page it may not require a label. See Landmark Roles section below. </li>

        <li>If an area begins with a heading element (e.g. <code>h1-h6</code>) it can be used as the label for the area using the <code>aria-labelledby</code> attribute.</li>

        <li>If an area requires a label and does not have a heading element, provide a label using the <code>aria-label</code> attribute.</li>

        <li>
          Do not use the landmark role as part of the label. For example, a navigation landmark with a label "Site Navigation" will be announced by a screen reader as "Site Navigation Navigation". The label should simply be "Site".
        </li>
      </ul>
      <p><em><a href="https://www.w3.org/TR/wai-aria-practices/#general-principles-of-landmark-design">Taken from ARIA Authoring Practices Guide</a></em></p>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Main</title>
    <contents>
      <table class="table table-striped table-hover" aria-labelledby="id1">
        <tbody>
          <tr>
            <th>Definition</th>
            <td>
              A <code>main</code> landmark identifies the primary content of the page.
            </td>
          </tr>
          <tr>
            <th>ARIA 1.1 Specification</th>
            <td>
              <a href="https://www.w3.org/TR/wai-aria/#main" target="_specification"><code>main</code> landmark</a>
            </td>
          </tr>
          <tr>
            <th>Coding Patterns</th>
            <td>
              <ul>
                <li>Each page should have one <code>main</code> landmark.</li>
                <li>The <code>main</code> landmark should be a top-level landmark.</li>
                <li>When a page contains nested <code>document</code> and/or <code>application</code> roles (e.g. typically through the use of <code>iframe</code> and <code>frame</code> elements),
                  each <code>document</code> or <code>application</code> role may have one <code>main</code> landmark.</li>
                <li>If a page includes more than one <code>main</code> landmark, each should have a unique label.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Techniques</th>
            <td>
              <ul>
                <li>Use the HTML5 <code>main</code> element to define a <code>main</code> landmark.</li>
                <li>If the HTML5 <code>main</code> element technique is not being used, use a <code>role="main"</code> attribute to define a <code>main</code> landmark.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Headings</th>
            <td>
              <ul>
                <li>Each main landmark should have an <code>h1</code> element describing the main content.</li>
                <li>If there are more than one main landmarks on the page, use <code>aria-labelledby</code> to reference the <code>h1</code> elements for labeling each landmark.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>

      <h2>One Main Landmark</h2>

      <h3>HTML5 <code>main</code> element technique</h3>
      <div class="code">
        <strong>&lt;main&gt;</strong><br/><br/>
        &#160;&#160;&lt;h1&gt;<em>title for main content</em>&lt;h1&gt;<br/><br/>
        &#160;&#160;.... <em>main content</em>....   <br/><br/>
        <strong>&lt;/main&gt;</strong>
      </div>

      <h3><code>[role="main"]</code> attribute technqiue</h3>
      <div class="code">
        &lt;div <strong>role="main"&gt;</strong><br/><br/>
        &#160;&#160;&lt;h1&gt;<em>title for main content</em>&lt;h1&gt;<br/><br/>
        &#160;&#160;.... <em>main content</em>....   <br/><br/>
        &lt;/div&gt;
      </div>


      <h2>Multiple Main Landmarks</h2>

      <div class="code">
        <strong>&lt;main  aria-labelledby="<em>title1</em>"&gt;</strong><br/><br/>
        &#160;&#160;&lt;h1 <strong>id="<em>title1</em>"</strong>&gt;<em>title for main content 1</em>&lt;h1&gt;<br/><br/>
        &#160;&#160;.... <em>main content</em>....<br/><br/>
        <strong>&lt;/main&gt;</strong><br/><br/>
        ....<br/><br/>
        <strong>&lt;main  aria-labelledby="<em>title2</em>"&gt;</strong><br/><br/>
        &#160;&#160;&lt;h1 <strong>id="<em>title2</em>"</strong>&gt;<em>title for main content 2</em>&lt;h1&gt;<br/><br/>
        &#160;&#160;.... <em>main content</em>....<br/><br/>
        <strong>&lt;/main&gt;</strong><br/><br/>
      </div>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Navigation</title>
    <contents>
      <table class="table table-striped table-hover" aria-labelledby="id1">
        <tbody>
          <tr>
            <th>Definition</th>
            <td>
              Navigation landmarks provide a way to identify groups (e.g. lists) of links that are intended to be used for website or page content navigation.
            </td>
          </tr>
          <tr>
            <th>ARIA 1.1 Specification</th>
            <td>
              <a href="https://www.w3.org/TR/wai-aria/#navigation" target="_specification"><code>navigation</code> landmark</a>
            </td>
          </tr>
          <tr>
            <th>Coding Patterns</th>
            <td>
              <ul>
                <li>If a page includes more than one <code>navigation</code> landmark, each should have a unique label.</li>
                <li>If a <code>navigation</code> landmark has an identical set of links as another <code>navigation</code> landmark on the page, use the same label for each <code>navigation</code> landmark.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Techniques</th>
            <td>
              <ul>
                <li>Use the HTML5 <code>nav</code> element to define a <code>navigation</code> landmark.</li>
                <li>If the HTML5 <code>nav</code> element technique is not being used, use a <code>role="navigation"</code> attribute to define a <code>navigation</code> landmark.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Headings</th>
            <td>
              <ul>
                <li>Each navigation landmark should have an <code>h2</code> element, which maybe rendered off screen.</li>
                <li>If there are more than one navigation landmarks on the page, use <code>aria-labelledby</code> to reference the <code>h2</code> elements for labeling each landmark.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
      <h2>One <code>navigation</code> landmark</h2>
      <h3>HTML5 <code>nav</code> element technique</h3>
      <div class="code">
        <strong>&lt;nav&gt;</strong><br/><br/>
        &#160;&#160;&lt;h2&gt;<em>title for navigation</em>&lt;h2&gt;<br/><br/>
        &#160;&#160;&lt;ul><br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page1.html"&gt;Link 1&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page2.html"&gt;Link 2&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page3.html"&gt;Link 3&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page4.html"&gt;Link 4&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;.....<br/>
        &#160;&#160;&lt;/ul><br/>
        <strong>&lt;/nav&gt;</strong>
      </div>
      <h3><code>[role="navigation"]</code> attribute technique</h3>
      <div class="code">
        &lt;div <strong>role="navigation"</strong>&gt;<br/><br/>
        &#160;&#160;&lt;h2&gt;<em>title for navigation</em>&lt;h2&gt;<br/><br/>
        &#160;&#160;&lt;ul><br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page1.html"&gt;Link 1&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page2.html"&gt;Link 2&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page3.html"&gt;Link 3&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page4.html"&gt;Link 4&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;.....<br/>
        &#160;&#160;&lt;/ul><br/>
        &lt;/div&gt;
      </div>
      <h2>More than one <code>navigation</code> landmark</h2>
      <div class="code">
        <strong>&lt;nav  aria-labelledby="<em>nav1</em>"&gt;</strong><br/><br/>
        &#160;&#160;&lt;h2 <strong>id="<em>nav1</em>"</strong>&gt;<em>title for navigation 1</em>&lt;h2&gt;<br/><br/>
        &#160;&#160;&lt;ul><br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page11.html"&gt;Link 1&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page12.html"&gt;Link 2&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page13.html"&gt;Link 3&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page14.html"&gt;Link 4&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;.....<br/>
        &#160;&#160;&lt;/ul><br/>
        <strong>&lt;/nav&gt;</strong><br/><br/>
        ....<br/><br/>
        <strong>&lt;nav  aria-labelledby="<em>nav2</em>"&gt;</strong><br/><br/>
        &#160;&#160;&lt;h2 <strong>id="<em>nav2</em>"</strong>&gt;<em>title for navigation 2</em>&lt;h2&gt;<br/><br/>
        &#160;&#160;&lt;ul><br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page11.html"&gt;Link 1&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page12.html"&gt;Link 2&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page13.html"&gt;Link 3&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page14.html"&gt;Link 4&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;.....<br/>
        &#160;&#160;&lt;/ul><br/>
        <strong>&lt;/nav&gt;</strong>
      </div>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Banner</title>
    <contents>

      <table class="table table-striped table-hover" aria-labelledby="id1">
        <tbody>
          <tr>
            <th>Definition</th>
            <td>
              A <code>banner</code> landmark identifies site-oriented content at the beginning of each page within a website. Site-oriented content typically includes things such as the logo or identity of the site sponsor, and site-specific search tool. A banner usually appears at the top of the page and typically spans the full width.
            </td>
          </tr>
          <tr>
            <th>ARIA 1.1 Specification</th>
            <td>
              <a href="https://www.w3.org/TR/wai-aria/#banner" target="_specification"><code>banner</code> landmark</a>
            </td>
          </tr>
          <tr>
            <th>Coding Patterns</th>
            <td>
              <ul>
                <li>Each page may have one <code>banner</code> landmark.</li>
                <li>The <code>banner</code> landmark should be a top-level landmark.</li>
                <li>When a page contains nested <code>document</code> and/or <code>application</code> roles (e.g. typically through the use of <code>iframe</code> and <code>frame</code> elements),
                  each <code>document</code> or <code>application</code> role may have one <code>banner</code> landmark.</li>
                <li>If a page includes more than one <code>banner</code> landmark, each should have a unique label (see Step 3 above).</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Techniques</th>
            <td>
              <ul>
                <li>The HTML5 <code>header</code> element defines a <code>banner</code> landmark when its context is the <code>body</code> element.</li>
                <li>The HTML5 <code>header</code> element is not considered a <code>banner</code> landmark when it is descendant of any of following elements:
                  <ul>
                    <li><code>address</code></li>
                    <li><code>article</code></li>
                    <li><code>aside</code></li>
                    <li><code>blockquote</code></li>
                    <li><code>details</code></li>
                    <li><code>fieldset</code></li>
                    <li><code>figure</code></li>
                    <li><code>main</code></li>
                    <li><code>nav</code></li>
                    <li><code>section</code></li>
                    <li><code>table</code></li>
                  </ul>
                </li>
                <li>If the HTML5 <code>header</code> element technique is not being used, a <code>role="banner"</code> attribute should be used to define a <code>banner</code> landmark.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Headings</th>
            <td>
              <ul>
                <li>Each banner landmark may have an <code>h1</code> element defining a label for the website.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>


      <h2>Example of HTML5 <code>header</code> element technique</h2>
      <div class="code">
        &lt;body&gt;<br/><br/>

        &#160;&#160;<strong>&lt;header&gt;</strong><br/>
        &#160;&#160;&#160;&#160;&lt;h1&gt;<em>website information</em>&lt;h1&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>banner content</em>....   <br/>
        &#160;&#160;<strong>&lt;/header&gt;</strong><br/><br/>
        &#160;&#160;&lt;nav&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h2&gt;<em>title for navigation</em>&lt;h2&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;ul><br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page1.html"&gt;Link 1&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page2.html"&gt;Link 2&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page3.html"&gt;Link 3&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page4.html"&gt;Link 4&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;.....<br/>
        &#160;&#160;&#160;&#160;&lt;/ul><br/>
        &#160;&#160;&lt;/nav&gt;<br/><br/>

        &#160;&#160;&lt;main&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h1&gt;<em>title for main content</em>&lt;h1&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>main content</em>....   <br/>
        &#160;&#160;&lt;/main&gt;<br/><br/>

        &#160;&#160;&lt;footer&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h2&gt;Contact, Policies and Legal&lt;h2&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>contentinfo content</em>....   <br/>
        &#160;&#160;&lt;/footer&gt;<br/>

        &lt;/body&gt;<br/><br/>

      </div>

      <h2>Example of <code>[role="banner"]</code> element technique</h2>
      <div class="code">
        &lt;body&gt;<br/><br/>

        &#160;&#160;&lt;div <strong>role="banner"</strong>&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h1&gt;<em>website information</em>&lt;h1&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>banner content</em>....   <br/>
        &#160;&#160;&lt;/div&gt;<br/><br/>

        &#160;&#160;&lt;div role="navigation"&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h2&gt;<em>title for navigation</em>&lt;h2&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;ul><br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page1.html"&gt;Link 1&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page2.html"&gt;Link 2&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page3.html"&gt;Link 3&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page4.html"&gt;Link 4&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;.....<br/>
        &#160;&#160;&#160;&#160;&lt;/ul><br/>
        &#160;&#160;&lt;/div&gt;<br/><br/>

        &#160;&#160;&lt;div role="main"&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h1&gt;<em>title for main content</em>&lt;h1&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>main content</em>....   <br/>
        &#160;&#160;&lt;/div&gt;<br/><br/>

        &#160;&#160;&lt;div role="contentinfo"&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h2&gt;Contact, Policies and Legal&lt;h2&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>contentinfo content</em>....   <br/>
        &#160;&#160;&lt;/div&gt;<br/>

        &lt;/body&gt;<br/><br/>

      </div>

    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Contentinfo</title>
    <contents>

      <table class="table table-striped table-hover" aria-labelledby="id1">
        <tbody>
          <tr>
            <th>Definition</th>
            <td>
              A <code>contentinfo</code> landmark is a way to identify common information at the bottom of each page within a website, typically called the "footer" of the page, including information such as copyrights and links to privacy and accessibility statements.
            </td>
          </tr>
          <tr>
            <th>ARIA 1.1 Specification</th>
            <td>
              <a href="https://www.w3.org/TR/wai-aria/#contentinfo" target="_specification"><code>contentinfo</code> landmark</a>
            </td>
          </tr>
          <tr>
            <th>Coding Patterns</th>
            <td>
              <ul>
                <li>Each page may have one <code>contentinfo</code> landmark.</li>
                <li>The <code>contentinfo</code> landmark should be a top-level landmark.</li>
                <li>When a page contains nested <code>document</code> and/or <code>application</code> roles (e.g. typically through the use of <code>iframe</code> and <code>frame</code> elements),
                  each <code>document</code> or <code>application</code> role may have one <code>contentinfo</code> landmark.</li>
                <li>If a page includes more than one <code>contentinfo</code> landmark, each should have a unique label (see Step 3 above).</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Techniques</th>
            <td>
              <ul>
                <li>The HTML5 <code>footer</code> element defines a <code>contentinfo</code> landmark when its context is the <code>body</code> element.</li>
                <li>The HTML5 <code>footer</code> element is not considered a <code>contentinfo</code> landmark when it is descendant of any of following elements:
                  <ul>
                    <li><code>address</code></li>
                    <li><code>article</code></li>
                    <li><code>aside</code></li>
                    <li><code>blockquote</code></li>
                    <li><code>details</code></li>
                    <li><code>fieldset</code></li>
                    <li><code>figure</code></li>
                    <li><code>main</code></li>
                    <li><code>nav</code></li>
                    <li><code>section</code></li>
                    <li><code>table</code></li>
                  </ul>
                </li>
                <li>If the HTML5 <code>footer</code> element technique is not being used, a <code>role="contentinfo"</code> attribute should be used to define a <code>contentinfo</code> landmark.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Headings</th>
            <td>
              <ul>
                <li>Each contentinfo landmark may have an <code>h2</code> element describing the content of the footer.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>


      <h2>Example of HTML5 <code>footer</code> element technique</h2>
      <div class="code">
        &lt;body&gt;<br/><br/>

        &#160;&#160;&lt;header&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h1&gt;<em>website information</em>&lt;h1&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>banner content</em>....   <br/>
        &#160;&#160;&lt;/header&gt;<br/><br/>
        &#160;&#160;&lt;nav&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h2&gt;<em>title for navigation</em>&lt;h2&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;ul><br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page1.html"&gt;Link 1&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page2.html"&gt;Link 2&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page3.html"&gt;Link 3&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page4.html"&gt;Link 4&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;.....<br/>
        &#160;&#160;&#160;&#160;&lt;/ul><br/>
        &#160;&#160;&lt;/nav&gt;<br/><br/>

        &#160;&#160;&lt;main&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h1&gt;<em>title for main content</em>&lt;h1&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>main content</em>....   <br/>
        &#160;&#160;&lt;/main&gt;<br/><br/>

        &#160;&#160;<strong>&lt;footer&gt;</strong><br/>
        &#160;&#160;&#160;&#160;&lt;h2&gt;<em>Contact, Policies and Legal</em>&lt;h2&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>contentinfo content</em>....   <br/>
        &#160;&#160;<strong>&lt;/footer&gt;</strong><br/>

        &lt;/body&gt;<br/><br/>

      </div>

      <h2>Example of <code>[role="contentinfo"]</code> element technique</h2>
      <div class="code">
        &lt;body&gt;<br/><br/>

        &#160;&#160;&lt;divrole="banner"&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h1&gt;website information&lt;h1&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>banner content</em>....   <br/>
        &#160;&#160;&lt;/div&gt;<br/><br/>

        &#160;&#160;&lt;div role="navigation"&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h2&gt;<em>title for navigation</em>&lt;h2&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;ul><br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page1.html"&gt;Link 1&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page2.html"&gt;Link 2&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page3.html"&gt;Link 3&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;&lt;li&gt;&lt;a href="page4.html"&gt;Link 4&lt;/a&gt;&lt;/li&gt;<br/>
        &#160;&#160;&#160;&#160;&#160;&#160;.....<br/>
        &#160;&#160;&#160;&#160;&lt;/ul><br/>
        &#160;&#160;&lt;/div&gt;<br/><br/>

        &#160;&#160;&lt;div role="main"&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h1&gt;<em>title for main content</em>&lt;h1&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>main content</em>....   <br/>
        &#160;&#160;&lt;/div&gt;<br/><br/>

        &#160;&#160;&lt;div <strong>role="contentinfo"</strong>&gt;<br/>
        &#160;&#160;&#160;&#160;&lt;h2&gt;<em>Contact, Policies and Legal</em>&lt;h2&gt;<br/>
        &#160;&#160;&#160;&#160;.... <em>contentinfo content</em>....   <br/>
        &#160;&#160;&lt;/div&gt;<br/>

        &lt;/body&gt;<br/><br/>

      </div>

    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Complementary</title>
    <contents>

      <table class="table table-striped table-hover" aria-labelledby="id1">
        <tbody>
          <tr>
            <th>Definition</th>
            <td>
              A <code>complementary</code> landmark is a supporting section of the document, designed to be complementary to the main content at a similar level in the DOM hierarchy, but remains meaningful when separated from the main content.
            </td>
          </tr>
          <tr>
            <th>ARIA 1.1 Specification</th>
            <td>
              <a href="https://www.w3.org/TR/wai-aria/#complementary" target="_specification"><code>complementary</code> landmark</a>
            </td>
          </tr>
          <tr>
            <th>Coding Patterns</th>
            <td>
              <ul>
                <li><code>complementary</code> landmarks should be top level landmarks (e.g. not contained within any other landmarks).</li>
                <li>If the complementary content is not related to the main content, a more general role should be assigned (e.g. <code>region</code>).</li>
                <li>If a page includes more than one <code>complementary</code> landmark, each should have a unique label (see Step 3 above).</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Techniques</th>
            <td>
              <ul>
                <li>Use the HTML5 <code>aside</code> element to define a <code>complementary</code> landmark.</li>
                <li>If the HTML5 <code>aside</code> element technique is not being used, use a <code>role="complementary"</code> attribute to define a <code>complementary</code> landmark.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Headings</th>
            <td>
              <ul>
                <li>Each complementary landmark should have an <code>h2</code> element identifying the content of the landmark.</li>
                <li>If there are more than one complementary landmark on the page, use <code>aria-labelledby</code> to reference the <code>h2</code> elements for labeling each landmark.</li>

              </ul>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Region</title>
    <contents>

      <table class="table table-striped table-hover" aria-labelledby="id1">
        <tbody>
          <tr>
            <th>Definition</th>
            <td>
              A <code>region</code> landmark is a perceivable section of the page containing content that is sufficiently important for users to be able to navigate to the section.
            </td>
          </tr>
          <tr>
            <th>ARIA 1.1 Specification</th>
            <td>
              <a href="https://www.w3.org/TR/wai-aria/#region" target="_specification"><code>region</code> landmark</a>
            </td>
          </tr>
          <tr>
            <th>Coding Patterns</th>
            <td>
              <ul>
                <li>A <code>region</code> landmark must have a label using <code>aria-label</code>, <code>arai-labelledby</code> or the <code>title</code> attribute.</li>
                <li>If a page includes more than one <code>region</code> landmark, each should have a unique label.</li>
                <li>The <code>region</code> landmark can be used identify content that named landmarks do not appropriately describe.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Techniques</th>
            <td>
              <ul>
                <li>Use the HTML5 <code>section</code> element to define a <code>region</code> landmark.</li>
                <li>If the HTML5 <code>section</code> element technique is not being used, use a <code>role="region"</code> attribute to define a <code>region</code> landmark.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th>Headings</th>
            <td>
              <ul>
                <li>Each region landmark should have a heading <code>h2-h6</code> element identifying the content of the landmark.</li>
                <li>If there are more than one region landmark on the page, use <code>aria-labelledby</code> to reference the heading element for labeling each landmark.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: JAWS Landmark Support Information</title>
    <contents>

      <table class="table table-striped table-hover" aria-labelledby="h1_title">
        <thead>
          <tr>
            <th>Keyboard Command</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><kbd>Insert</kbd>+<kbd>Control</kbd>+<kbd>Z</kbd></td>
            <td>
              <ul>
                <li>Toggle on/off virtual JAWS cursor for reading web pages.</li>
                <li>Must be in virtual mode for the following commands to work.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td><kbd>Insert</kbd>+<kbd>Control</kbd>+<kbd>R</kbd></td>
            <td>Region List</td>
          </tr>
          <tr>
            <td><kbd>Q</kbd></td>
            <td>Main Region</td>
          </tr>
          <tr>
            <td><kbd>R</kbd></td>
            <td>Next Region</td>
          </tr>
          <tr>
            <td><kbd>Shift</kbd>+<kbd>R</kbd></td>
            <td>Previous Region</td>
          </tr>
        </tbody>
      </table>

      <h2>Feature Overview</h2>

      <ul>
        <li>JAWS documentation and commands refer to landmarks as <q>regions</q>.</li>
        <li>In virtual you can move sequentially through the landmarks on a page or view a list of landmarks.</li>
        <li>When navigating a web page JAWS announces landmark information when the virtual or PC cursor enters a new landmark.</li>
      </ul>

      <h2>Other Jaws Command Resources</h2>
      <ul>
        <li><a href="http://accessibility.psu.edu/jawscommands" target="_specification">Penn State: JAWS commands for web</a></li>
        <li><a href="http://webaim.org/resources/shortcuts/jaws" target="_specification">WebAIM: JAWS commands for web</a></li>
        <li><a href="http://www.freedomscientific.com/Training/Surfs-up/Quick_Keys.htm" target="_specification">Freedom Scientific: JAWS commands for web</a></li>
        <li><a href="https://dequeuniversity.com/screenreaders/jaws-keyboard-shortcuts" target="_specification">Deque University: JAWS commands</a></li>
      </ul>

    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: NVDA Landmark Support</title>
    <contents>

      <table class="table table-striped table-hover" aria-labelledby="h1_title">
        <thead>
          <tr>
            <th>Keyboard Command</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><kbd>Insert</kbd>+<kbd>Space</kbd></td>
            <td>
              <ul>
                <li>Toggle between focus mode and browse mode.</li>
                <li>Must be in browse mode for the following commands to work.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td><kbd>Insert</kbd>+<kbd>F7</kbd></td>
            <td>List of Landmarks</td>
          </tr>
          <tr>
            <td><kbd>D</kbd></td>
            <td>Next Landmark</td>
          </tr>
          <tr>
            <td><kbd>Shift</kbd>+<kbd>D</kbd></td>
            <td>Previous Landmark</td>
          </tr>
        </tbody>
      </table>

      <h2>Feature Overview</h2>
      <ul>
        <li>In browse mode you can move sequentially through the landmarks on the page or view a list of landmarks.</li>
        <li>When navigating a web page NVDA announces landmark information when the browse or focus cursor enters a new landmark.</li>
      </ul>

      <h2>Other NVDA Command Resources</h2>
      <ul>
        <li><a href="http://accessibility.psu.edu/nvda" target="_specification">Penn State: NVDA Keyboard Commands</a></li>
        <li><a href="http://webaim.org/resources/shortcuts/nvda" target="_specification">Webaim: NVDA Keyboard Commands</a></li>
        <li><a href="http://community.nvda-project.org/documentation/userGuide.html#toc40" target="_specification">NVDA: Web Browse Keyboard Commands</a></li>
        <li><a href="https://dequeuniversity.com/screenreaders/nvda-keyboard-shortcuts" target="_specification">Deque University: NVDA Commands</a></li>
      </ul>

    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Voice Over Landmark Support</title>
    <contents>

      <table class="table table-striped table-hover" aria-labelledby="h1_title">
        <thead>
          <tr>
            <th>Keyboard Command</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><kbd>Command</kbd>+<kbd>F5</kbd></td>
            <td>Start Voice Over on MacOS</td>
          </tr>
          <tr>
            <td><kbd>Control</kbd>+<kbd>Option</kbd>+<kbd>U</kbd></td>
            <td>Open rotor to navigate content on the web page and use the <kbb>left arrow</kbb> or <kbd>right arrow</kbd> keys to show the list of landmarks.</td>
          </tr>
        </tbody>
      </table>

      <h2>Feature Overview</h2>
      <ul>
        <li>Voice Over allows you to view a list of landmarks.</li>
        <li>When navigating a web page Voice Over announces landmark information when the browse or focus cursor enters a new landmark.</li>
      </ul>

      <h2>Other Voice Over Command Resources</h2>

      <ul>
        <li><a href="http://accessibility.psu.edu/voiceover" target="_specification">Penn State: Voice Over for OS X</a></li>
        <li><a href="http://www.apple.com/voiceover/info/guide/_1131.html" target="_specification">Apple Voice Over Commands</a></li>
        <li><a href="https://dequeuniversity.com/screenreaders/voiceover-keyboard-shortcuts#vo-mac-basics" target="_specification">Deque University: Voice Over Commands</a></li>
      </ul>

    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Tutorials</title>
    <contents>
      <ul>
        <li><a href="https://www.w3.org/TR/wai-aria-practices/examples/landmarks/main.html">W3C ARIA Landmarks Example</a></li>
        <li><a href="https://mediaspace.illinois.edu/media/t/1_c6vvlk6g" target="_video">JAWS for Windows: Landmark regions and Headings Navigation</a> (~15 minutes)</li>
        <li><a href="https://mediaspace.illinois.edu/media/t/0_hdra12rh" target="_video">NVDA for Windows: Landmark regions and Headings Navigation</a> (~17 minutes)</li>
        <li><a href="https://mediaspace.illinois.edu/media/t/1_g9rb6w59" target="_video">VoiceOver for macOS: Landmark regions and Headings Navigation</a> (~16 minutes)</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Landmark Regions: Testing Tools</title>
    <contents>
      <ul>
        <li><a href="https://addons.mozilla.org/en-US/firefox/addon/ainspector-wcag/" target="_tools">AInspector for Firefox</a></li>
        <li><a href="https://accessibility-bookmarklets.org/" target="_tools">Accessibility Bookmarklets</a></li>
        <li><a href="https://github.com/a11y-tools/page-structure" target="_tools">Page Structure Addon for Firefox</a></li>
      </ul>

    </contents>
  </slide>

  <slide>
    <title>Part 4: ARIA enabled Widgets </title>
    <contents>
    </contents>
  </slide>

  <slide>
    <title>Widgets: Tabindex and Keyboard Focus</title>
    <contents>
      <ul>
        <li>
            <a
              href="https://www.w3.org/TR/html4/interact/forms.html#adef-tabindex"  target="_specification">
              HTM4 tabindex requirements
            </a>
        </li>
        <li>
            <a
              href="https://www.w3.org/TR/html5/editing.html#focus"  target="_specification">
              HTM5 focus and tabindex requirements
            </a>
        </li>
       <li>Actively define visual focus style, since the default browser visual focus styling of focus is typically hard to discern.</li>
      </ul>

      <h2 id="tabindex_values">Tabindex Values</h2>
      <table class="table table-striped table-hover" aria-label="tabindex_values">
        <thead>
          <tr>
            <th>Value</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>-1</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Not included in the tab order of the page.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>0</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Included in the tab order of the page.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>&gt; 0</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Defines the tab order of the page.</li>
                <li><strong>Note:</strong> This technique is not recommended due to browser incompatibilities and unpredicatable focus behaviors.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>

  <slide>
    <title>Widgets: Inaccessible Custom Checkbox</title>
    <style id="style">
fieldset {
     border-color: #EEE;
     width: 10em;
}

fieldset legend {
     font-size: 100%;
}

label,
div.checkbox {
     padding: 2px;
     width: 10em;
     display: block;
     margin-top: 0.25em;
     margin-bottom: 0.25em;
}

label input {
     margin-right: 0.5em;
}

div.checkbox span {
     padding: 0.25em;
     margin-right: 0.25em;
}
 div.checkbox span:before {
     content: '✗';
     color: red;
}

div.checkbox.checked span {
  margin-right: 0.375em;
}

div.checkbox.checked span:before {
     content: '✓';
     color: green;
     font-size: 90%;
}
 label {
}
 label:hover,
.checkbox:hover {
     padding: 0;
     border: 2px solid #000;
     background-color: #CCD;
}
    </style>
    <contents>
     <h2>Accessibility Issues</h2>
     <ul>
      <li>Keyboard support</li>
      <li>Keyboard focus styling</li>
      <li>Role information</li>
      <li>Accessible name</li>
      <li>State of checkbox</li>
     </ul>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-inaccessible/output/" target="_webedit">Checkbox example on WebEdit</a></p>

     <script id="script">
function toggleCheckbox(node) {
 if (node.classList.contains('checked')) {
  node.classList.remove('checked');
 } else {
  node.classList.add('checked');
 }
}

function clickCheckbox(event) {
 var cb = event.currentTarget;
 toggleCheckbox(cb);
 event.stopPropagation();
 event.preventDefault();
}
     </script>

     <div id="example">
      <fieldset>
        <legend>
            Pizza Toppings
        </legend>
        <label>
          <input type="checkbox"/>
            Green pepper
         </label>
        <label>
          <input type="checkbox"/>
            Onion
        </label>
        <div class="checkbox"
             onclick="clickCheckbox(event)">
          <span></span>
            Mushrooms
        </div>
        <div class="checkbox"
            onclick="clickCheckbox(event)">
          <span></span>
            Spinach
        </div>
      </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>

  </slide>

 <slide>
    <title>Widgets: Basic Screen Reader Commands</title>
    <contents>
      <table class="table table-striped table-hover" aria-label="Basic Screen Reader Commands">
        <thead>
          <tr>
            <th>Action</th>
            <th>JAWS (Windows)</th>
            <th>NVDA (Windows)</th>
            <th>Voice Over (OS X)</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Next link, form control or widget</td>
            <td>Tab</td>
            <td>Tab</td>
            <td>Tab</td>
          </tr>
          <tr>
            <td>Previous link, form control or widget</td>
            <td>Shift+Tab</td>
            <td>Shift+Tab</td>
            <td>Shift+Tab</td>
          </tr>
          <tr>
            <td>Re-read current item</td>
            <td>Insert+Numpad 5</td>
            <td>NVDA+Numpad 5 or NVDA+Shift+O</td>
            <td>Command+Option+Space</td>
          </tr>
          <tr>
            <td>More information on item</td>
            <td>Insert+SHIFT+F1 and Insert+Control+Shift+F1</td>
            <td>NVDA+D</td>
            <td>Control+Option+F4</td>
          </tr>
          <tr>
            <td>List of Links</td>
            <td>Insert+F7</td>
            <td>NVDA+F7</td>
            <td>Command+Option+U, then left/right arrow to list of links</td>
          </tr>
          <tr>
            <td>Detailed Keyboard Information</td>
            <td><a href="http://doccenter.freedomscientific.com/doccenter/archives/training/jawskeystrokes.htm">JAWS Keyboard Documentation</a></td>
            <td><a href="http://www.nvaccess.org/files/nvda/documentation/userGuide.html">NVDA Documentation</a></td>
            <td><a href="https://www.apple.com/voiceover/info/guide/">Voice Over Guide</a></td>
          </tr>
        </tbody>
      </table>
    </contents>

  </slide>

  <slide>
    <title>Widget Example: Responding to the keyboard</title>
    <style id="style">
fieldset {
     border-color: #EEE;
     width: 10em;
}

fieldset legend {
     font-size: 100%;
}

label,
div.checkbox {
     padding: 2px;
     width: 10em;
     display: block;
     margin-top: 0.25em;
     margin-bottom: 0.25em;
}

label input {
     margin-right: 0.5em;
}

div.checkbox span {
     padding: 0.25em;
}

div.checkbox span:before {
    content: '✗';
    color: red;
    padding-right: 0.125em;
}

div.checkbox.checked span:before {
    content: '✓';
    color: green;
    padding-right: 0.190em;
}
    </style>
    <contents>
      <ul>
        <li>Adding <code>tabindex="0"</code> to make part of tab order of the page.</li>
        <li>Add <code>onKeyDown</code> event handler to toggle checkbox when <kbd>space</kbd> key is pressed.</li>
      </ul>

      <script id="script" type="text/javascript">
function toggleCheckbox(node) {
 if (node.classList.contains('checked')) {
  node.classList.remove('checked');
 } else {
  node.classList.add('checked');
 }
}

function clickCheckbox(event) {
 var cb = event.currentTarget;
 toggleCheckbox(cb);
 event.stopPropagation();
 event.preventDefault();
}

function keydownCheckbox(event) {
  var cb = event.currentTarget;
  if (event.key === ' ') {
    toggleCheckbox(cb);

    event.stopPropagation();
    event.preventDefault();
  }
}      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-part-1/output/" target="_webedit">Part 1 on WebEdit</a></p>

     <div id="example">
<fieldset>
    <legend>
        Pizza Toppings
    </legend>
    <label>
      <input type="checkbox"/>
        Green pepper
     </label>
    <label>
      <input type="checkbox"/>
        Onion
    </label>
    <div class="checkbox"
         tabindex="0"
         onclick="clickCheckbox(event)"
         onkeydown="keydownCheckbox(event)">
      <span></span>
        Mushrooms
    </div>
    <div class="checkbox"
        tabindex="0"
        onclick="clickCheckbox(event)"
        onkeydown="keydownCheckbox(event)">
      <span></span>
          Spinach
    </div>
  </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

  <slide>
    <title>Widget Example: Adding role, checked state and accessible name</title>
    <style id="style">
fieldset {
     border-color: #EEE;
     width: 10em;
}

fieldset legend {
     font-size: 100%;
}

label,
div.checkbox {
     padding: 2px;
     width: 10em;
     display: block;
     margin-top: 0.25em;
     margin-bottom: 0.25em;
}

label input {
     margin-right: 0.5em;
}

div.checkbox span {
     padding: 0.25em;
}

div.checkbox span:before {
    content: '✗';
    color: red;
    padding-right: 0.125em;
}

div.checkbox.checked span:before {
    content: '✓';
    color: green;
    padding-right: 0.190em;
}

label:hover,
.checkbox:hover {
     padding: 0;
     border: 2px solid #000;
     background-color: #CCD;
}
</style>
    <contents>
      <ul>
        <li>Adding <code>role="checkbox"</code> to make part of tab order of the page.</li>
        <li>Adding <code>aria-checked</code> attribute.</li>
        <li>Accessible name from text content.</li>
        <li>Removing state character (e.g. <span style="color: red">✗</span>) from accessible name using <code>aria-hidden</code>.</li>
      </ul>

      <script id="script" type="text/javascript">
function toggleCheckbox(node) {
 if (node.classList.contains('checked')) {
  node.classList.remove('checked');
  node.setAttribute('aria-checked', 'false');
 } else {
  node.classList.add('checked');
  node.setAttribute('aria-checked', 'true');
 }
}

function clickCheckbox(event) {
 var cb = event.currentTarget;
 toggleCheckbox(cb);
 event.stopPropagation();
 event.preventDefault();
}

function keydownCheckbox(event) {
  var cb = event.currentTarget;
  if (event.key === ' ') {
    toggleCheckbox(cb);

    event.stopPropagation();
    event.preventDefault();
  }
}
      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-part-2/output/" target="_webedit">Part 2 on WebEdit</a></p>

     <div id="example">
<fieldset>
    <legend>
        Pizza Toppings
    </legend>
    <label>
      <input type="checkbox"/>
        Green pepper
     </label>
    <label>
      <input type="checkbox"/>
        Onion
    </label>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
         tabindex="0"
         onclick="clickCheckbox(event)"
         onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
        Mushrooms
    </div>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
        tabindex="0"
        onclick="clickCheckbox(event)"
        onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
          Spinach
    </div>
  </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

 <slide>
    <title>Widget Example: Keyboard Focus and hover styling</title>
    <style id="style">
fieldset {
     border-color: #EEE;
     width: 10em;
}

fieldset legend {
     font-size: 100%;
}

label,
div.checkbox {
     padding: 4px;
     width: 10em;
     display: block;
     margin-top: 0.25em;
     margin-bottom: 0.25em;
}

label input {
     margin-right: 0.5em;
}

div.checkbox span {
     padding: 0.25em;
}

div.checkbox span:before {
    content: '✗';
    color: red;
    padding-right: 0.125em;
}

div.checkbox.checked span:before {
    content: '✓';
    color: green;
    padding-right: 0.190em;
}

label.focus,
div.checkbox:focus {
  padding: 2px;
  border: 2px solid #999;
  background-color: #DDE;
}

label:hover,
div.checkbox:hover {
  background-color: #CCD;
}
    </style>
    <contents>
      <ul>
        <li>Keyboard <code>focus</code> and <code>hover</code> styling should be similar to to harmonize the look and feel of styling between interaction techniques.</li>
        <li>Recommend <code>focus</code> styling has a border and <code>hover</code> does not.</li>
        <li><code>focus</code> styling should use a 2 pixel<code>border</code> or <code>outline</code> width to make the control with focus easy for users to see and track.</li>
        <li>If the <code>border</code> technique is used the <code>border</code> must be removed when the widget does not have focus to support focus styling to change when users select operating system high contrast modes.</li>
        <li>Need to use <code>onfocus</code> and <code>onblur</code> events to create focus styling of standard radio buttons and checkboxes by styling their labels.</li>
        <li>Styling background color makes the focus change much easier to detect visually.</li>
      </ul>

      <script id="script" type="text/javascript">
function toggleCheckbox(node) {
 if (node.classList.contains('checked')) {
  node.classList.remove('checked');
  node.setAttribute('aria-checked', 'false');
 } else {
  node.classList.add('checked');
  node.setAttribute('aria-checked', 'true');
 }
}

function clickCheckbox(event) {
 var cb = event.currentTarget;
 toggleCheckbox(cb);
 event.stopPropagation();
 event.preventDefault();
}

function keydownCheckbox(event) {
  var cb = event.currentTarget;
  if (event.key === ' ') {
    toggleCheckbox(cb);

    event.stopPropagation();
    event.preventDefault();
  }
}

function checkboxFocus(event) {
  event.currentTarget.parentElement.classList.add('focus');
}

function checkboxBlur(event) {
  event.currentTarget.parentElement.classList.remove('focus');
}
      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-part-3/output/" target="_webedit">Part 3 on WebEdit</a></p>

     <div id="example">
<fieldset>
    <legend>
        Pizza Toppings
    </legend>
    <label>
      <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
        Green pepper
     </label>
    <label>
      <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
        Onion
    </label>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
         tabindex="0"
         onclick="clickCheckbox(event)"
         onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
        Mushrooms
    </div>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
        tabindex="0"
        onclick="clickCheckbox(event)"
        onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
          Spinach
    </div>
  </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
  </slide>

 <slide>
    <title>Widget Example: Synchronization of ARIA and visual states</title>
    <style id="style">
fieldset {
     border-color: #EEE;
     width: 10em;
}

fieldset legend {
     font-size: 100%;
}

label,
[role="checkbox"] {
     padding: 4px;
     width: 10em;
     display: block;
     margin-top: 0.25em;
     margin-bottom: 0.25em;
}

label input {
     margin-right: 0.5em;
}

[role="checkbox"] span {
     padding: 0.25em;
}

[role="checkbox"] span:before {
    content: '✗';
    color: red;
    padding-right: 0.125em;
}

[role="checkbox"][aria-checked="true"] span:before {
    content: '✓';
    color: green;
    padding-right: 0.190em;
}

label.focus,
[role="checkbox"]:focus {
  padding: 2px;
  border: 2px solid #999;
  background-color: #DDE;
}

label:hover,
[role="checkbox"]:hover {
  background-color: #CCD;
}
    </style>
    <contents>
      <ul>
        <li>Using CSS attribute selectors and CSS <code>content</code> property to synchronize visual and aria states.</li>
        <li>Use of CSS <code>content</code> property supports high contrast browser settings, unike the use of CSS <code>background-image</code>.</li>
      </ul>

      <script id="script" type="text/javascript">
function toggleCheckbox(node) {
 if (node.getAttribute('aria-checked') === 'true') {
  node.setAttribute('aria-checked', 'false');
 } else {
  node.setAttribute('aria-checked', 'true');
 }
}

function clickCheckbox(event) {
 var cb = event.currentTarget;
 toggleCheckbox(cb);
 event.stopPropagation();
 event.preventDefault();
}

function keydownCheckbox(event) {
  var cb = event.currentTarget;
  if (event.key === ' ') {
    toggleCheckbox(cb);

    event.stopPropagation();
    event.preventDefault();
  }
}

function checkboxFocus(event) {
  event.currentTarget.parentElement.classList.add('focus');
}

function checkboxBlur(event) {
  event.currentTarget.parentElement.classList.remove('focus');
}
      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-part-4/output/" target="_webedit">Part 4 on WebEdit</a></p>

     <div id="example">
<h1>Part 4: Custom Checkbox Widget with synchronization of ARIA and visual states</h1>
<fieldset>
    <legend>
        Pizza Toppings
    </legend>
    <label>
      <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
        Green pepper
     </label>
    <label>
      <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
        Onion
    </label>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
         tabindex="0"
         onclick="clickCheckbox(event)"
         onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
        Mushrooms
    </div>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
        tabindex="0"
        onclick="clickCheckbox(event)"
        onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
          Spinach
    </div>
  </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
  </slide>

  <slide>
    <title>Widget Example: Accessible Custom Checkbox Widget using ARIA</title>
    <style id="style">
      fieldset {
        border-color: #EEE;
        width: 10em;
      }

      fieldset legend {
        font-size: 100%;
      }

      label,
      [role="checkbox"] {
        display: block;
        margin: 0.25em;
        font-weight: normal;
        padding: 4px;
        border: none;
        width: 10em;
      }

      label input[type=checkbox] {
        padding-left: 1em;
      }

      div[role="checkbox"] span:before {
        content: '✗';
        color: red;
        padding-left: 0.125em;
        padding-right: 0.25em;
      }

      div[role="checkbox"][aria-checked="true"] span:before {
        content: '✓';
        color: green;
        padding-left: 0.125em;
        padding-right: 0.315em;
      }

      label.focus,
      [role="checkbox"]:focus {
        padding: 2px;
        border: 2px solid #999;
        background-color: #DDE;
      }

      label:hover,
      [role="checkbox"]:hover {
        background-color: #CCD;
      }
    </style>
    <contents>


      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
          if (node.getAttribute('aria-checked') === 'true') {
            node.setAttribute('aria-checked', 'false');
          }
          else {
            node.setAttribute('aria-checked', 'true');
          }
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.key === ' ') {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }

        function clickCheckbox(event) {
          var cb = event.currentTarget;
          toggleCheckbox(cb);
          event.stopPropagation();
          event.preventDefault();
        }

        function checkboxFocus(event) {
          event.currentTarget.parentNode.classList.add('focus');
        }

        function checkboxBlur(event) {
          event.currentTarget.parentNode.classList.remove('focus');
        }
      </script>

     <h2>Features</h2>
     <ul>
       <li>Responds to mouse events using <code>onClick</code> event.</li>
       <li>Responds to <kbd>space</kbd> keyboard event using <code>onKeyDown</code> event.</li>
       <li><code>tabindex=0</code> makes widget keyboard focusable and include in tab order of page.</li>
       <li><code>role="checkbox"</code> identifies widget to assistive technologies as a "checkbox".</li>
       <li><code>aria-checked</code> attribute identifies the state as being "checked" or "unchecked".</li>
       <li>Accessible name comes from child text content of the <code>div[role="checkbox"]</code> element.</li>
       <li><code>aria-hidden</code> attribute hides the characters used for indicating state (i.e. <span style="color: red">✗</span> and <span style="color: green">✓</span>) from being included in the accessible name calculation.</li>
       <li>CSS attribute selectors are used to keep the visual indication of checked state snychronized with accessibility API.</li>
       <li><code>onFocus</code> and <code>onBlur</code> event handlers are used on standard checkboxes to provide visual indication of keyboard focus.</li>
     </ul>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-accessible/output/" target="_webedit">Checkbox example on WebEdit</a></p>

     <div id="example">
    <fieldset>
        <legend>

            Pizza Toppings

        </legend>
        <label>
          <input type="checkbox"
               onfocus="checkboxFocus(event)"
               onblur="checkboxBlur(event)"/>


              Green pepper

        </label>
        <label>
          <input type="checkbox"
               onfocus="checkboxFocus(event)"
               onblur="checkboxBlur(event)"/>

              Onion

        </label>
        <div role="checkbox"
           tabindex="0"
           aria-checked="false"
           onkeydown="keydownCheckbox(event)"
           onclick="clickCheckbox(event)">
          <span aria-hidden="true"></span>

              Mushrooms

        </div>
        <div role="checkbox"
           tabindex="0"
           aria-checked="false"
           onkeydown="keydownCheckbox(event)"
           onclick="clickCheckbox(event)">
          <span aria-hidden="true"></span>

              Spinach

        </div>
      </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
   </contents>
  </slide>

  <slide>
    <title>Widgets: Best Practices </title>
    <contents>
      <p><a href="https://www.w3.org/TR/html-aria/">Using ARIA in HTML</a></p>
      <ul>
        <li>Use native semantics of HTML (e.g. <code>input[type=checkbox]</code> rather than div[role=checkbox]).</li>
        <li>Don't override native semantics of elements (e.g. <code>h2[role="banner]</code>).</li>
        <li>Don't redefine the native semantics of an element (e.g. <code>main[role=main]</code>).</li>
        <li>All interactive ARIA widgets must be operable with the keyboard.</li>
        <li>Do not use role="presentation" or aria-hidden="true" on a visible focusable elements.</li>
        <li>All interactive elements must have an accessible name.</li>
        <li>Live regions (e.g. <code>aria-live</code> attribute and <code>log</code>, <code>status</code>, and <code>alert</code> roles) should be used with extreme caution, only for asynchronous content changes important for the users attention.</li>
      </ul>
    </contents>
  </slide>

   <slide>
    <title>ARIA 1.2: New Features</title>
    <contents>
      <p><a href="https://www.w3.org/TR/wai-aria-1.2/">ARIA 1.2 Candidate Recommendation</a></p>
      <ul>
        <li>Combobox design pattern 1.2 that works with assistive technologies.</li>
        <li>Accessible Object Model (AOM) to reflect ARIA properties.</li>
        <li>HTML harmonization:
          <ul>
            <li>Define roles appropriate for every HTML element.</li>
            <li>Assign default <a href="https://www.w3.org/TR/html-aria/" target="_spec">ARIA role mappings to every HTML element</a>.</li>
            <li>Some new roles, like <code>generic</code> role for elements with no semantics like <code>div</code> and <code>span</code>, should not be used by developers.</li>
          </ul>
        </li>
      </ul>
    </contents>
  </slide>


   <slide>
    <title>ARIA 1.2: Authoring Practices</title>
    <contents>
      <p><a href="https://w3c.github.io/aria-practices/">ARIA Authoring Practices 1.2</a></p>
      <ul>
        <li>Combobox design pattern 1.2 that works with assistive technologies.</li>
        <li>Unit testing of examples for:
          <ul>
            <li>Keyboard interaction.</li>
            <li>Proper use of ARIA roles.</li>
            <li>Proper use of ARIA properties and states.</li>
          </ul>
        </li>
        <li>High contrast support in newer examples:
          <ul>
            <li>Date pickers</li>
            <li>Combobox</li>
            <li>Carousel</li>
            <li>Sliders</li>
            <li>Tabs</li>
          </ul>
        </li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Open Source Tools</title>
    <contents>
      <ul>
        <li><a href="https://addons.mozilla.org/en-US/firefox/addon/ainspector-wcag/">AInspector WCAG for Firefox</a></li>
        <li><a href="https://fae.disability.illinois.edu">Functional Accessibility Evaluator 2.1</a></li>
        <li><a href="https://accessibility-bookmarklets.org/">Public Bookmarklets Website</a></li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Questions and Discussion</title>
    <contents>
    </contents>
  </slide>

</slides>


